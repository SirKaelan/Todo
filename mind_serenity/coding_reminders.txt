# Don't leave stuff for later (make the code good from the start)
  - fix anything on the spot
  - refactor less later
# Write whatever code but then examine it critically
  - to fix logical errors immediately
# Keep an organized to-do list
# Write good variable names from the start
  - don't be lazy about them
  - the variable name must describe the information represented by the variable (must be concise not verbose)
# HTML
  - Try to learn and use semantic tags
  - Look into accessibility
# Creating custom hooks
  - Use custom hooks to manage component logic in an isolated way (this might keep components easy to read and understand; separation of concerns in achieved)
    > component = (UI); custom hook = component (Logic)
    > Then a choice might be made between having some util functions inside that hook file to be used to create the logic of the hook or the util functions could be put in a nearby utils folder
    > https://www.youtube.com/watch?v=J-g9ZJha8FE <-- a video explaining the use cases of custom hooks
# Creating util functions
  - for reusing logic in multiple different places in the codebase
  - when that func will not use any React built in tools (other hooks)
# State
  - global state = pieces that are going to be reused
  - local state = if piece is only required in one component
  - extract multiple state operations into a reducer (useReducer hook)
  - https://dmitripavlutin.com/react-state-management/ (for reference)
# Folder and file naming
  - kebab case might be good (this-is-kebab-case.js)
  - PascalCase might work bad on some other OS-es

# Folder organization (!!! where files need to be exported, use barrel index files !!!)
- create folders based on app features
  > https://profy.dev/article/react-folder-structure (for reference)
- feature-based folder structure (can be changed to add my personal touch to it)
  > global state store?
  > features/
    - todos/
      - maybe a global utils file for this feature
      - contains everything related to todos (create-todo-form, edit-todo-modal)
        - contains components, tests, hooks, maybe specific utils, maybe context
    - .../
    - ui/ (for simple UI components like button, modal, card, etc.)
    - users/ (for login, sign up pages, etc.)
  > pages folder (i'm assuming it's a jsx file)
    - create-todo.js
    - create-project.js
    - login.js