High level tasks:   <-- Add new ones as problems/ideas occur
  > Start implementing folder structure
  > Finish project MVP
  # Change to use semantic HTML for MVP project
  # Add tests to MVP
  # Use routing to change between the different pages

-------- Details of tasks --------

# Finish project MVP
  > Look into html forms and how they'd work in React
    - https://www.freecodecamp.org/news/how-to-build-forms-in-react/
  > Add form/input validation
  > Add edit and delete functionality to todos
  > Study about semantic HTML and implement it here
  > Export context ts types in a separate file
  > Learn how to generate unique IDs and use then on Todos



-------- Archive --------
# Generate CRA project with TS
# Brainstorm MVP features
# Setup project folder
# Research app/code architecture (decided to just follow a folder structure; maybe when this project gets a backend a code architecture will be required?)
  - Google around to understand software architectures
    > https://www.youtube.com/watch?v=lTkL1oIMiaU&list=PLSyLGd0D0b4ThfElztKEueqQ5SIHJjUEU (on 3nd video)
# Look into React testing (test after having written some code)
  - Google around to get a basic idea on how to do testing in React (philosophy and all that)
  - https://www.youtube.com/watch?v=OVNjsIto9xM
  - https://www.youtube.com/watch?v=Flo268xRpV0
  - We test from the perspective of an end user interacting with the app
# Decide which state management tool to use
# Create a new branch for MVP